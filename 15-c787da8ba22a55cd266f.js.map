{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.object.seal.js","webpack:///./node_modules/core-js/modules/es6.reflect.apply.js","webpack:///./node_modules/dompurify/dist/purify.js"],"names":["isObject","__webpack_require__","meta","onFreeze","$seal","it","$export","aFunction","anObject","rApply","Reflect","apply","fApply","Function","S","F","target","thisArgument","argumentsList","T","L","call","module","exports","freeze$1","Object","freeze","x","html","svg","svgFilters","mathMl","text","freeze$2","html$1","svg$1","mathMl$1","xml","hasOwnProperty","setPrototypeOf","apply$1","addToSet","set","array","l","length","element","lcElement","toLowerCase","isFrozen","clone","object","newObject","property","fun","thisValue","args","seal","MUSTACHE_EXPR","ERB_EXPR","DATA_ATTR","ARIA_ATTR","IS_ALLOWED_URI","IS_SCRIPT_OR_DATA","ATTR_WHITESPACE","_typeof","Symbol","iterator","obj","constructor","prototype","_toConsumableArray","arr","Array","isArray","i","arr2","from","arraySlice","slice","getGlobal","window","_createTrustedTypesPolicy","trustedTypes","document","createPolicy","suffix","currentScript","hasAttribute","getAttribute","policyName","createHTML","html$$1","error","console","warn","createDOMPurify","arguments","undefined","DOMPurify","root","version","removed","nodeType","isSupported","originalDocument","useDOMParser","removeTitle","DocumentFragment","HTMLTemplateElement","Node","NodeFilter","_window$NamedNodeMap","NamedNodeMap","MozNamedAttrMap","Text","Comment","DOMParser","TrustedTypes","template","createElement","content","ownerDocument","trustedTypesPolicy","emptyHTML","_document","implementation","createNodeIterator","getElementsByTagName","createDocumentFragment","importNode","hooks","createHTMLDocument","documentMode","MUSTACHE_EXPR$$1","ERB_EXPR$$1","DATA_ATTR$$1","ARIA_ATTR$$1","IS_SCRIPT_OR_DATA$$1","ATTR_WHITESPACE$$1","IS_ALLOWED_URI$$1","ALLOWED_TAGS","DEFAULT_ALLOWED_TAGS","concat","ALLOWED_ATTR","DEFAULT_ALLOWED_ATTR","FORBID_TAGS","FORBID_ATTR","ALLOW_ARIA_ATTR","ALLOW_DATA_ATTR","ALLOW_UNKNOWN_PROTOCOLS","SAFE_FOR_JQUERY","SAFE_FOR_TEMPLATES","WHOLE_DOCUMENT","SET_CONFIG","FORCE_BODY","RETURN_DOM","RETURN_DOM_FRAGMENT","RETURN_DOM_IMPORT","RETURN_TRUSTED_TYPE","SANITIZE_DOM","KEEP_CONTENT","IN_PLACE","USE_PROFILES","FORBID_CONTENTS","DATA_URI_TAGS","URI_SAFE_ATTRIBUTES","DEFAULT_URI_SAFE_ATTRIBUTES","CONFIG","formElement","_parseConfig","cfg","ADD_URI_SAFE_ATTR","ALLOWED_URI_REGEXP","ADD_TAGS","ADD_ATTR","table","tbody","_forceRemove","node","push","parentNode","removeChild","outerHTML","_removeAttribute","name","attribute","getAttributeNode","removeAttribute","_initDocument","dirty","doc","leadingWhitespace","matches","match","parseFromString","documentElement","_doc","body","firstElementChild","insertBefore","createTextNode","childNodes","querySelector","test","innerHTML","_createIterator","SHOW_ELEMENT","SHOW_COMMENT","SHOW_TEXT","FILTER_ACCEPT","_isNode","nodeName","_executeHook","entryPoint","currentNode","data","forEach","hook","_sanitizeElements","elm","textContent","attributes","setAttribute","namespaceURI","tagName","allowedTags","querySelectorAll","insertAdjacentHTML","htmlToInsert","cloneNode","replace","_isValidAttribute","lcTag","lcName","value","indexOf","_sanitizeAttributes","attr","idAttr","hookEvent","attrName","attrValue","keepAttr","allowedAttributes","_attr","trim","id","RegExp","keys","join","setAttributeNS","pop","_sanitizeShadowDOM","fragment","shadowNode","shadowIterator","nextNode","sanitize","importedNode","oldNode","returnNode","toString","TypeError","toStaticHTML","appendChild","firstChild","nodeIterator","serializedHTML","setConfig","clearConfig","isValidAttribute","tag","addHook","hookFunction","removeHook","removeHooks","removeAllHooks","factory"],"mappings":"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","file":"15-c787da8ba22a55cd266f.js","sourcesContent":["// 19.1.2.17 Object.seal(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('seal', function ($seal) {\n  return function seal(it) {\n    return $seal && isObject(it) ? $seal(meta(it)) : it;\n  };\n});\n","// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar rApply = (require('./_global').Reflect || {}).apply;\nvar fApply = Function.apply;\n// MS Edge argumentsList argument is optional\n$export($export.S + $export.F * !require('./_fails')(function () {\n  rApply(function () { /* empty */ });\n}), 'Reflect', {\n  apply: function apply(target, thisArgument, argumentsList) {\n    var T = aFunction(target);\n    var L = anObject(argumentsList);\n    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);\n  }\n});\n","require(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.date.to-string\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\nrequire(\"core-js/modules/es6.string.trim\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.array.index-of\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.array.for-each\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.array.from\");\n\nrequire(\"core-js/modules/es6.array.is-array\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.seal\");\n\nrequire(\"core-js/modules/es6.object.is-frozen\");\n\nrequire(\"core-js/modules/es6.reflect.apply\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.object.freeze\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.array.iterator\");\n\nrequire(\"core-js/modules/es6.object.to-string\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\nrequire(\"core-js/modules/es6.function.name\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.array.from\");\n\nrequire(\"core-js/modules/es7.symbol.async-iterator\");\n\nrequire(\"core-js/modules/es6.symbol\");\n\nrequire(\"core-js/modules/es6.object.seal\");\n\nrequire(\"core-js/modules/es6.object.is-frozen\");\n\nrequire(\"core-js/modules/es6.reflect.apply\");\n\nrequire(\"core-js/modules/es6.object.set-prototype-of\");\n\nrequire(\"core-js/modules/es6.object.freeze\");\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.DOMPurify = factory();\n})(this, function () {\n  'use strict';\n\n  var freeze$1 = Object.freeze || function (x) {\n    return x;\n  };\n\n  var html = freeze$1(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']); // SVG\n\n  var svg = freeze$1(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'audio', 'canvas', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'video', 'view', 'vkern']);\n  var svgFilters = freeze$1(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);\n  var mathMl = freeze$1(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']);\n  var text = freeze$1(['#text']);\n\n  var freeze$2 = Object.freeze || function (x) {\n    return x;\n  };\n\n  var html$1 = freeze$2(['accept', 'action', 'align', 'alt', 'autocomplete', 'background', 'bgcolor', 'border', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'coords', 'crossorigin', 'datetime', 'default', 'dir', 'disabled', 'download', 'enctype', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'integrity', 'ismap', 'label', 'lang', 'list', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'name', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns']);\n  var svg$1 = freeze$2(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'tabindex', 'targetx', 'targety', 'transform', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);\n  var mathMl$1 = freeze$2(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);\n  var xml = freeze$2(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);\n  var hasOwnProperty = Object.hasOwnProperty;\n  var setPrototypeOf = Object.setPrototypeOf;\n\n  var _ref$1 = typeof Reflect !== 'undefined' && Reflect;\n\n  var apply$1 = _ref$1.apply;\n\n  if (!apply$1) {\n    apply$1 = function apply(fun, thisValue, args) {\n      return fun.apply(thisValue, args);\n    };\n  }\n  /* Add properties to a lookup table */\n\n\n  function addToSet(set, array) {\n    if (setPrototypeOf) {\n      // Make 'in' and truthy checks like Boolean(set.constructor)\n      // independent of any properties defined on Object.prototype.\n      // Prevent prototype setters from intercepting set as a this value.\n      setPrototypeOf(set, null);\n    }\n\n    var l = array.length;\n\n    while (l--) {\n      var element = array[l];\n\n      if (typeof element === 'string') {\n        var lcElement = element.toLowerCase();\n\n        if (lcElement !== element) {\n          // Config presets (e.g. tags.js, attrs.js) are immutable.\n          if (!Object.isFrozen(array)) {\n            array[l] = lcElement;\n          }\n\n          element = lcElement;\n        }\n      }\n\n      set[element] = true;\n    }\n\n    return set;\n  }\n  /* Shallow clone an object */\n\n\n  function clone(object) {\n    var newObject = {};\n    var property = void 0;\n\n    for (property in object) {\n      if (apply$1(hasOwnProperty, object, [property])) {\n        newObject[property] = object[property];\n      }\n    }\n\n    return newObject;\n  }\n\n  var seal = Object.seal || function (x) {\n    return x;\n  };\n\n  var MUSTACHE_EXPR = seal(/\\{\\{[\\s\\S]*|[\\s\\S]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\n\n  var ERB_EXPR = seal(/<%[\\s\\S]*|[\\s\\S]*%>/gm);\n  var DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]/); // eslint-disable-line no-useless-escape\n\n  var ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\n\n  var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n  );\n  var IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\n  var ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205f\\u3000]/g // eslint-disable-line no-control-regex\n  );\n\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  };\n\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  }\n\n  var _ref = typeof Reflect !== 'undefined' && Reflect;\n\n  var apply = _ref.apply;\n  var arraySlice = Array.prototype.slice;\n  var freeze = Object.freeze;\n\n  var getGlobal = function getGlobal() {\n    return typeof window === 'undefined' ? null : window;\n  };\n\n  if (!apply) {\n    apply = function apply(fun, thisValue, args) {\n      return fun.apply(thisValue, args);\n    };\n  }\n  /**\n   * Creates a no-op policy for internal use only.\n   * Don't export this function outside this module!\n   * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.\n   * @param {Document} document The document object (to determine policy name suffix)\n   * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types\n   * are not supported).\n   */\n\n\n  var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {\n    if ((typeof trustedTypes === 'undefined' ? 'undefined' : _typeof(trustedTypes)) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {\n      return null;\n    } // Allow the callers to control the unique policy name\n    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n    // Policy creation with duplicate names throws in Trusted Types.\n\n\n    var suffix = null;\n    var ATTR_NAME = 'data-tt-policy-suffix';\n\n    if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {\n      suffix = document.currentScript.getAttribute(ATTR_NAME);\n    }\n\n    var policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n\n    try {\n      return trustedTypes.createPolicy(policyName, {\n        createHTML: function createHTML(html$$1) {\n          return html$$1;\n        }\n      });\n    } catch (error) {\n      // Policy creation failed (most likely another DOMPurify script has\n      // already run). Skip creating the policy, as this will only cause errors\n      // if TT are enforced.\n      console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\n      return null;\n    }\n  };\n\n  function createDOMPurify() {\n    var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n\n    var DOMPurify = function DOMPurify(root) {\n      return createDOMPurify(root);\n    };\n    /**\n     * Version label, exposed for easier checks\n     * if DOMPurify is up to date or not\n     */\n\n\n    DOMPurify.version = '2.0.7';\n    /**\n     * Array of elements that DOMPurify removed during sanitation.\n     * Empty if nothing was removed.\n     */\n\n    DOMPurify.removed = [];\n\n    if (!window || !window.document || window.document.nodeType !== 9) {\n      // Not running in a browser, provide a factory function\n      // so that you can pass your own Window\n      DOMPurify.isSupported = false;\n      return DOMPurify;\n    }\n\n    var originalDocument = window.document;\n    var useDOMParser = false;\n    var removeTitle = false;\n    var document = window.document;\n    var DocumentFragment = window.DocumentFragment,\n        HTMLTemplateElement = window.HTMLTemplateElement,\n        Node = window.Node,\n        NodeFilter = window.NodeFilter,\n        _window$NamedNodeMap = window.NamedNodeMap,\n        NamedNodeMap = _window$NamedNodeMap === undefined ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,\n        Text = window.Text,\n        Comment = window.Comment,\n        DOMParser = window.DOMParser,\n        TrustedTypes = window.TrustedTypes; // As per issue #47, the web-components registry is inherited by a\n    // new document created via createHTMLDocument. As per the spec\n    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n    // a new empty registry is used when creating a template contents owner\n    // document, so we use that as our parent document to ensure nothing\n    // is inherited.\n\n    if (typeof HTMLTemplateElement === 'function') {\n      var template = document.createElement('template');\n\n      if (template.content && template.content.ownerDocument) {\n        document = template.content.ownerDocument;\n      }\n    }\n\n    var trustedTypesPolicy = _createTrustedTypesPolicy(TrustedTypes, originalDocument);\n\n    var emptyHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML('') : '';\n    var _document = document,\n        implementation = _document.implementation,\n        createNodeIterator = _document.createNodeIterator,\n        getElementsByTagName = _document.getElementsByTagName,\n        createDocumentFragment = _document.createDocumentFragment;\n    var importNode = originalDocument.importNode;\n    var hooks = {};\n    /**\n     * Expose whether this browser supports running the full DOMPurify.\n     */\n\n    DOMPurify.isSupported = implementation && typeof implementation.createHTMLDocument !== 'undefined' && document.documentMode !== 9;\n    var MUSTACHE_EXPR$$1 = MUSTACHE_EXPR,\n        ERB_EXPR$$1 = ERB_EXPR,\n        DATA_ATTR$$1 = DATA_ATTR,\n        ARIA_ATTR$$1 = ARIA_ATTR,\n        IS_SCRIPT_OR_DATA$$1 = IS_SCRIPT_OR_DATA,\n        ATTR_WHITESPACE$$1 = ATTR_WHITESPACE;\n    var IS_ALLOWED_URI$$1 = IS_ALLOWED_URI;\n    /**\n     * We consider the elements and attributes below to be safe. Ideally\n     * don't add any new ones but feel free to remove unwanted ones.\n     */\n\n    /* allowed element names */\n\n    var ALLOWED_TAGS = null;\n    var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(html), _toConsumableArray(svg), _toConsumableArray(svgFilters), _toConsumableArray(mathMl), _toConsumableArray(text)));\n    /* Allowed attribute names */\n\n    var ALLOWED_ATTR = null;\n    var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray(html$1), _toConsumableArray(svg$1), _toConsumableArray(mathMl$1), _toConsumableArray(xml)));\n    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n\n    var FORBID_TAGS = null;\n    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n\n    var FORBID_ATTR = null;\n    /* Decide if ARIA attributes are okay */\n\n    var ALLOW_ARIA_ATTR = true;\n    /* Decide if custom data attributes are okay */\n\n    var ALLOW_DATA_ATTR = true;\n    /* Decide if unknown protocols are okay */\n\n    var ALLOW_UNKNOWN_PROTOCOLS = false;\n    /* Output should be safe for jQuery's $() factory? */\n\n    var SAFE_FOR_JQUERY = false;\n    /* Output should be safe for common template engines.\n     * This means, DOMPurify removes data attributes, mustaches and ERB\n     */\n\n    var SAFE_FOR_TEMPLATES = false;\n    /* Decide if document with <html>... should be returned */\n\n    var WHOLE_DOCUMENT = false;\n    /* Track whether config is already set on this instance of DOMPurify. */\n\n    var SET_CONFIG = false;\n    /* Decide if all elements (e.g. style, script) must be children of\n     * document.body. By default, browsers might move them to document.head */\n\n    var FORCE_BODY = false;\n    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n     * string (or a TrustedHTML object if Trusted Types are supported).\n     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n     */\n\n    var RETURN_DOM = false;\n    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n     * string  (or a TrustedHTML object if Trusted Types are supported) */\n\n    var RETURN_DOM_FRAGMENT = false;\n    /* If `RETURN_DOM` or `RETURN_DOM_FRAGMENT` is enabled, decide if the returned DOM\n     * `Node` is imported into the current `Document`. If this flag is not enabled the\n     * `Node` will belong (its ownerDocument) to a fresh `HTMLDocument`, created by\n     * DOMPurify. */\n\n    var RETURN_DOM_IMPORT = false;\n    /* Try to return a Trusted Type object instead of a string, retrun a string in\n     * case Trusted Types are not supported  */\n\n    var RETURN_TRUSTED_TYPE = false;\n    /* Output should be free from DOM clobbering attacks? */\n\n    var SANITIZE_DOM = true;\n    /* Keep element content when removing element? */\n\n    var KEEP_CONTENT = true;\n    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n     * of importing it into a new Document and returning a sanitized copy */\n\n    var IN_PLACE = false;\n    /* Allow usage of profiles like html, svg and mathMl */\n\n    var USE_PROFILES = {};\n    /* Tags to ignore content of when KEEP_CONTENT is true */\n\n    var FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);\n    /* Tags that are safe for data: URIs */\n\n    var DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image']);\n    /* Attributes safe for values like \"javascript:\" */\n\n    var URI_SAFE_ATTRIBUTES = null;\n    var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'summary', 'title', 'value', 'style', 'xmlns']);\n    /* Keep a reference to config to pass to hooks */\n\n    var CONFIG = null;\n    /* Ideally, do not touch anything below this line */\n\n    /* ______________________________________________ */\n\n    var formElement = document.createElement('form');\n    /**\n     * _parseConfig\n     *\n     * @param  {Object} cfg optional config literal\n     */\n    // eslint-disable-next-line complexity\n\n    var _parseConfig = function _parseConfig(cfg) {\n      if (CONFIG && CONFIG === cfg) {\n        return;\n      }\n      /* Shield configuration object from tampering */\n\n\n      if (!cfg || (typeof cfg === 'undefined' ? 'undefined' : _typeof(cfg)) !== 'object') {\n        cfg = {};\n      }\n      /* Set configuration parameters */\n\n\n      ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;\n      ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;\n      URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR) : DEFAULT_URI_SAFE_ATTRIBUTES;\n      FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};\n      FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};\n      USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;\n      ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n\n      ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n\n      ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n\n      SAFE_FOR_JQUERY = cfg.SAFE_FOR_JQUERY || false; // Default false\n\n      SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n\n      WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n\n      RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n\n      RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n\n      RETURN_DOM_IMPORT = cfg.RETURN_DOM_IMPORT || false; // Default false\n\n      RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n\n      FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n\n      SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n\n      KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n\n      IN_PLACE = cfg.IN_PLACE || false; // Default false\n\n      IS_ALLOWED_URI$$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$$1;\n\n      if (SAFE_FOR_TEMPLATES) {\n        ALLOW_DATA_ATTR = false;\n      }\n\n      if (RETURN_DOM_FRAGMENT) {\n        RETURN_DOM = true;\n      }\n      /* Parse profile info */\n\n\n      if (USE_PROFILES) {\n        ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(text)));\n        ALLOWED_ATTR = [];\n\n        if (USE_PROFILES.html === true) {\n          addToSet(ALLOWED_TAGS, html);\n          addToSet(ALLOWED_ATTR, html$1);\n        }\n\n        if (USE_PROFILES.svg === true) {\n          addToSet(ALLOWED_TAGS, svg);\n          addToSet(ALLOWED_ATTR, svg$1);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n\n        if (USE_PROFILES.svgFilters === true) {\n          addToSet(ALLOWED_TAGS, svgFilters);\n          addToSet(ALLOWED_ATTR, svg$1);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n\n        if (USE_PROFILES.mathMl === true) {\n          addToSet(ALLOWED_TAGS, mathMl);\n          addToSet(ALLOWED_ATTR, mathMl$1);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n      }\n      /* Merge configuration parameters */\n\n\n      if (cfg.ADD_TAGS) {\n        if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n          ALLOWED_TAGS = clone(ALLOWED_TAGS);\n        }\n\n        addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);\n      }\n\n      if (cfg.ADD_ATTR) {\n        if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n          ALLOWED_ATTR = clone(ALLOWED_ATTR);\n        }\n\n        addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);\n      }\n\n      if (cfg.ADD_URI_SAFE_ATTR) {\n        addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);\n      }\n      /* Add #text in case KEEP_CONTENT is set to true */\n\n\n      if (KEEP_CONTENT) {\n        ALLOWED_TAGS['#text'] = true;\n      }\n      /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n\n\n      if (WHOLE_DOCUMENT) {\n        addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n      }\n      /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n\n\n      if (ALLOWED_TAGS.table) {\n        addToSet(ALLOWED_TAGS, ['tbody']);\n        delete FORBID_TAGS.tbody;\n      } // Prevent further manipulation of configuration.\n      // Not available in IE8, Safari 5, etc.\n\n\n      if (freeze) {\n        freeze(cfg);\n      }\n\n      CONFIG = cfg;\n    };\n    /**\n     * _forceRemove\n     *\n     * @param  {Node} node a DOM node\n     */\n\n\n    var _forceRemove = function _forceRemove(node) {\n      DOMPurify.removed.push({\n        element: node\n      });\n\n      try {\n        node.parentNode.removeChild(node);\n      } catch (error) {\n        node.outerHTML = emptyHTML;\n      }\n    };\n    /**\n     * _removeAttribute\n     *\n     * @param  {String} name an Attribute name\n     * @param  {Node} node a DOM node\n     */\n\n\n    var _removeAttribute = function _removeAttribute(name, node) {\n      try {\n        DOMPurify.removed.push({\n          attribute: node.getAttributeNode(name),\n          from: node\n        });\n      } catch (error) {\n        DOMPurify.removed.push({\n          attribute: null,\n          from: node\n        });\n      }\n\n      node.removeAttribute(name);\n    };\n    /**\n     * _initDocument\n     *\n     * @param  {String} dirty a string of dirty markup\n     * @return {Document} a DOM, filled with the dirty markup\n     */\n\n\n    var _initDocument = function _initDocument(dirty) {\n      /* Create a HTML document */\n      var doc = void 0;\n      var leadingWhitespace = void 0;\n\n      if (FORCE_BODY) {\n        dirty = '<remove></remove>' + dirty;\n      } else {\n        /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n        var matches = dirty.match(/^[\\s]+/);\n        leadingWhitespace = matches && matches[0];\n\n        if (leadingWhitespace) {\n          dirty = dirty.slice(leadingWhitespace.length);\n        }\n      }\n      /* Use DOMParser to workaround Firefox bug (see comment below) */\n\n\n      if (useDOMParser) {\n        try {\n          doc = new DOMParser().parseFromString(dirty, 'text/html');\n        } catch (error) {}\n      }\n      /* Remove title to fix a mXSS bug in older MS Edge */\n\n\n      if (removeTitle) {\n        addToSet(FORBID_TAGS, ['title']);\n      }\n      /* Otherwise use createHTMLDocument, because DOMParser is unsafe in\n      Safari (see comment below) */\n\n\n      if (!doc || !doc.documentElement) {\n        doc = implementation.createHTMLDocument('');\n        var _doc = doc,\n            body = _doc.body;\n        body.parentNode.removeChild(body.parentNode.firstElementChild);\n        body.outerHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n      }\n\n      if (dirty && leadingWhitespace) {\n        doc.body.insertBefore(document.createTextNode(leadingWhitespace), doc.body.childNodes[0] || null);\n      }\n      /* Work on whole document or just its body */\n\n\n      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n    }; // Firefox uses a different parser for innerHTML rather than\n    // DOMParser (see https://bugzilla.mozilla.org/show_bug.cgi?id=1205631)\n    // which means that you *must* use DOMParser, otherwise the output may\n    // not be safe if used in a document.write context later.\n    //\n    // So we feature detect the Firefox bug and use the DOMParser if necessary.\n    //\n    // Chrome 77 and other versions ship an mXSS bug that caused a bypass to\n    // happen. We now check for the mXSS trigger and react accordingly.\n\n\n    if (DOMPurify.isSupported) {\n      (function () {\n        try {\n          var doc = _initDocument('<svg><p><textarea><img src=\"</textarea><img src=x abc=1//\">');\n\n          if (doc.querySelector('svg img')) {\n            useDOMParser = true;\n          }\n        } catch (error) {}\n      })();\n\n      (function () {\n        try {\n          var doc = _initDocument('<x/><title>&lt;/title&gt;&lt;img&gt;');\n\n          if (/<\\/title/.test(doc.querySelector('title').innerHTML)) {\n            removeTitle = true;\n          }\n        } catch (error) {}\n      })();\n    }\n    /**\n     * _createIterator\n     *\n     * @param  {Document} root document/fragment to create iterator for\n     * @return {Iterator} iterator instance\n     */\n\n\n    var _createIterator = function _createIterator(root) {\n      return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, function () {\n        return NodeFilter.FILTER_ACCEPT;\n      }, false);\n    };\n    /**\n     * _isClobbered\n     *\n     * @param  {Node} elm element to check for clobbering attacks\n     * @return {Boolean} true if clobbered, false if safe\n     */\n\n\n    var _isClobbered = function _isClobbered(elm) {\n      if (elm instanceof Text || elm instanceof Comment) {\n        return false;\n      }\n\n      if (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string') {\n        return true;\n      }\n\n      return false;\n    };\n    /**\n     * _isNode\n     *\n     * @param  {Node} obj object to check whether it's a DOM node\n     * @return {Boolean} true is object is a DOM node\n     */\n\n\n    var _isNode = function _isNode(obj) {\n      return (typeof Node === 'undefined' ? 'undefined' : _typeof(Node)) === 'object' ? obj instanceof Node : obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && typeof obj.nodeType === 'number' && typeof obj.nodeName === 'string';\n    };\n    /**\n     * _executeHook\n     * Execute user configurable hooks\n     *\n     * @param  {String} entryPoint  Name of the hook's entry point\n     * @param  {Node} currentNode node to work on with the hook\n     * @param  {Object} data additional hook parameters\n     */\n\n\n    var _executeHook = function _executeHook(entryPoint, currentNode, data) {\n      if (!hooks[entryPoint]) {\n        return;\n      }\n\n      hooks[entryPoint].forEach(function (hook) {\n        hook.call(DOMPurify, currentNode, data, CONFIG);\n      });\n    };\n    /**\n     * _sanitizeElements\n     *\n     * @protect nodeName\n     * @protect textContent\n     * @protect removeChild\n     *\n     * @param   {Node} currentNode to check for permission to exist\n     * @return  {Boolean} true if node was killed, false if left alive\n     */\n    // eslint-disable-next-line complexity\n\n\n    var _sanitizeElements = function _sanitizeElements(currentNode) {\n      var content = void 0;\n      /* Execute a hook if present */\n\n      _executeHook('beforeSanitizeElements', currentNode, null);\n      /* Check if element is clobbered or can clobber */\n\n\n      if (_isClobbered(currentNode)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Now let's check the element's type and name */\n\n\n      var tagName = currentNode.nodeName.toLowerCase();\n      /* Execute a hook if present */\n\n      _executeHook('uponSanitizeElement', currentNode, {\n        tagName: tagName,\n        allowedTags: ALLOWED_TAGS\n      });\n      /* Take care of an mXSS pattern using p, br inside svg, math */\n\n\n      if ((tagName === 'svg' || tagName === 'math') && currentNode.querySelectorAll('p, br').length !== 0) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Remove element if anything forbids its presence */\n\n\n      if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n        /* Keep content except for black-listed elements */\n        if (KEEP_CONTENT && !FORBID_CONTENTS[tagName] && typeof currentNode.insertAdjacentHTML === 'function') {\n          try {\n            var htmlToInsert = currentNode.innerHTML;\n            currentNode.insertAdjacentHTML('AfterEnd', trustedTypesPolicy ? trustedTypesPolicy.createHTML(htmlToInsert) : htmlToInsert);\n          } catch (error) {}\n        }\n\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Remove in case a noscript/noembed XSS is suspected */\n\n\n      if (tagName === 'noscript' && /<\\/noscript/i.test(currentNode.innerHTML)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n\n      if (tagName === 'noembed' && /<\\/noembed/i.test(currentNode.innerHTML)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Convert markup to cover jQuery behavior */\n\n\n      if (SAFE_FOR_JQUERY && !currentNode.firstElementChild && (!currentNode.content || !currentNode.content.firstElementChild) && /</g.test(currentNode.textContent)) {\n        DOMPurify.removed.push({\n          element: currentNode.cloneNode()\n        });\n\n        if (currentNode.innerHTML) {\n          currentNode.innerHTML = currentNode.innerHTML.replace(/</g, '&lt;');\n        } else {\n          currentNode.innerHTML = currentNode.textContent.replace(/</g, '&lt;');\n        }\n      }\n      /* Sanitize element content to be template-safe */\n\n\n      if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\n        /* Get the element's text content */\n        content = currentNode.textContent;\n        content = content.replace(MUSTACHE_EXPR$$1, ' ');\n        content = content.replace(ERB_EXPR$$1, ' ');\n\n        if (currentNode.textContent !== content) {\n          DOMPurify.removed.push({\n            element: currentNode.cloneNode()\n          });\n          currentNode.textContent = content;\n        }\n      }\n      /* Execute a hook if present */\n\n\n      _executeHook('afterSanitizeElements', currentNode, null);\n\n      return false;\n    };\n    /**\n     * _isValidAttribute\n     *\n     * @param  {string} lcTag Lowercase tag name of containing element.\n     * @param  {string} lcName Lowercase attribute name.\n     * @param  {string} value Attribute value.\n     * @return {Boolean} Returns true if `value` is valid, otherwise false.\n     */\n    // eslint-disable-next-line complexity\n\n\n    var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n      /* Make sure attribute cannot clobber */\n      if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\n        return false;\n      }\n      /* Allow valid data-* attributes: At least one character after \"-\"\n          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n          We don't need to check the value; it's always URI safe. */\n\n\n      if (ALLOW_DATA_ATTR && DATA_ATTR$$1.test(lcName)) {// This attribute is safe\n      } else if (ALLOW_ARIA_ATTR && ARIA_ATTR$$1.test(lcName)) {// This attribute is safe\n\n        /* Otherwise, check the name is permitted */\n      } else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n        return false;\n        /* Check value is safe. First, is attr inert? If so, is safe */\n      } else if (URI_SAFE_ATTRIBUTES[lcName]) {// This attribute is safe\n\n        /* Check no script, data or unknown possibly unsafe URI\n          unless we know URI values are safe for that attribute */\n      } else if (IS_ALLOWED_URI$$1.test(value.replace(ATTR_WHITESPACE$$1, ''))) {// This attribute is safe\n\n        /* Keep image data URIs alive if src/xlink:href is allowed */\n\n        /* Further prevent gadget XSS for dynamically built script tags */\n      } else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && value.indexOf('data:') === 0 && DATA_URI_TAGS[lcTag]) {// This attribute is safe\n\n        /* Allow unknown protocols: This provides support for links that\n          are handled by protocol handlers which may be unknown ahead of\n          time, e.g. fb:, spotify: */\n      } else if (ALLOW_UNKNOWN_PROTOCOLS && !IS_SCRIPT_OR_DATA$$1.test(value.replace(ATTR_WHITESPACE$$1, ''))) {// This attribute is safe\n\n        /* Check for binary attributes */\n        // eslint-disable-next-line no-negated-condition\n      } else if (!value) {// Binary attributes are safe at this point\n\n        /* Anything else, presume unsafe, do not add it back */\n      } else {\n        return false;\n      }\n\n      return true;\n    };\n    /**\n     * _sanitizeAttributes\n     *\n     * @protect attributes\n     * @protect nodeName\n     * @protect removeAttribute\n     * @protect setAttribute\n     *\n     * @param  {Node} currentNode to sanitize\n     */\n    // eslint-disable-next-line complexity\n\n\n    var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n      var attr = void 0;\n      var value = void 0;\n      var lcName = void 0;\n      var idAttr = void 0;\n      var l = void 0;\n      /* Execute a hook if present */\n\n      _executeHook('beforeSanitizeAttributes', currentNode, null);\n\n      var attributes = currentNode.attributes;\n      /* Check if we have attributes; if not we might have a text node */\n\n      if (!attributes) {\n        return;\n      }\n\n      var hookEvent = {\n        attrName: '',\n        attrValue: '',\n        keepAttr: true,\n        allowedAttributes: ALLOWED_ATTR\n      };\n      l = attributes.length;\n      /* Go backwards over all attributes; safely remove bad ones */\n\n      while (l--) {\n        attr = attributes[l];\n        var _attr = attr,\n            name = _attr.name,\n            namespaceURI = _attr.namespaceURI;\n        value = attr.value.trim();\n        lcName = name.toLowerCase();\n        /* Execute a hook if present */\n\n        hookEvent.attrName = lcName;\n        hookEvent.attrValue = value;\n        hookEvent.keepAttr = true;\n\n        _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\n\n        value = hookEvent.attrValue;\n        /* Remove attribute */\n        // Safari (iOS + Mac), last tested v8.0.5, crashes if you try to\n        // remove a \"name\" attribute from an <img> tag that has an \"id\"\n        // attribute at the time.\n\n        if (lcName === 'name' && currentNode.nodeName === 'IMG' && attributes.id) {\n          idAttr = attributes.id;\n          attributes = apply(arraySlice, attributes, []);\n\n          _removeAttribute('id', currentNode);\n\n          _removeAttribute(name, currentNode);\n\n          if (attributes.indexOf(idAttr) > l) {\n            currentNode.setAttribute('id', idAttr.value);\n          }\n        } else if ( // This works around a bug in Safari, where input[type=file]\n        // cannot be dynamically set after type has been removed\n        currentNode.nodeName === 'INPUT' && lcName === 'type' && value === 'file' && hookEvent.keepAttr && (ALLOWED_ATTR[lcName] || !FORBID_ATTR[lcName])) {\n          continue;\n        } else {\n          // This avoids a crash in Safari v9.0 with double-ids.\n          // The trick is to first set the id to be empty and then to\n          // remove the attribute\n          if (name === 'id') {\n            currentNode.setAttribute(name, '');\n          }\n\n          _removeAttribute(name, currentNode);\n        }\n        /* Did the hooks approve of the attribute? */\n\n\n        if (!hookEvent.keepAttr) {\n          continue;\n        }\n        /* Take care of an mXSS pattern using namespace switches */\n\n\n        if (/svg|math/i.test(currentNode.namespaceURI) && new RegExp('</(' + Object.keys(FORBID_CONTENTS).join('|') + ')', 'i').test(value)) {\n          _removeAttribute(name, currentNode);\n\n          continue;\n        }\n        /* Sanitize attribute content to be template-safe */\n\n\n        if (SAFE_FOR_TEMPLATES) {\n          value = value.replace(MUSTACHE_EXPR$$1, ' ');\n          value = value.replace(ERB_EXPR$$1, ' ');\n        }\n        /* Is `value` valid for this attribute? */\n\n\n        var lcTag = currentNode.nodeName.toLowerCase();\n\n        if (!_isValidAttribute(lcTag, lcName, value)) {\n          continue;\n        }\n        /* Handle invalid data-* attribute set by try-catching it */\n\n\n        try {\n          if (namespaceURI) {\n            currentNode.setAttributeNS(namespaceURI, name, value);\n          } else {\n            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n            currentNode.setAttribute(name, value);\n          }\n\n          DOMPurify.removed.pop();\n        } catch (error) {}\n      }\n      /* Execute a hook if present */\n\n\n      _executeHook('afterSanitizeAttributes', currentNode, null);\n    };\n    /**\n     * _sanitizeShadowDOM\n     *\n     * @param  {DocumentFragment} fragment to iterate over recursively\n     */\n\n\n    var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n      var shadowNode = void 0;\n\n      var shadowIterator = _createIterator(fragment);\n      /* Execute a hook if present */\n\n\n      _executeHook('beforeSanitizeShadowDOM', fragment, null);\n\n      while (shadowNode = shadowIterator.nextNode()) {\n        /* Execute a hook if present */\n        _executeHook('uponSanitizeShadowNode', shadowNode, null);\n        /* Sanitize tags and elements */\n\n\n        if (_sanitizeElements(shadowNode)) {\n          continue;\n        }\n        /* Deep shadow DOM detected */\n\n\n        if (shadowNode.content instanceof DocumentFragment) {\n          _sanitizeShadowDOM(shadowNode.content);\n        }\n        /* Check attributes, sanitize if necessary */\n\n\n        _sanitizeAttributes(shadowNode);\n      }\n      /* Execute a hook if present */\n\n\n      _executeHook('afterSanitizeShadowDOM', fragment, null);\n    };\n    /**\n     * Sanitize\n     * Public method providing core sanitation functionality\n     *\n     * @param {String|Node} dirty string or DOM node\n     * @param {Object} configuration object\n     */\n    // eslint-disable-next-line complexity\n\n\n    DOMPurify.sanitize = function (dirty, cfg) {\n      var body = void 0;\n      var importedNode = void 0;\n      var currentNode = void 0;\n      var oldNode = void 0;\n      var returnNode = void 0;\n      /* Make sure we have a string to sanitize.\n        DO NOT return early, as this will return the wrong type if\n        the user has requested a DOM object rather than a string */\n\n      if (!dirty) {\n        dirty = '<!-->';\n      }\n      /* Stringify, in case dirty is an object */\n\n\n      if (typeof dirty !== 'string' && !_isNode(dirty)) {\n        // eslint-disable-next-line no-negated-condition\n        if (typeof dirty.toString !== 'function') {\n          throw new TypeError('toString is not a function');\n        } else {\n          dirty = dirty.toString();\n\n          if (typeof dirty !== 'string') {\n            throw new TypeError('dirty is not a string, aborting');\n          }\n        }\n      }\n      /* Check we can run. Otherwise fall back or ignore */\n\n\n      if (!DOMPurify.isSupported) {\n        if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {\n          if (typeof dirty === 'string') {\n            return window.toStaticHTML(dirty);\n          }\n\n          if (_isNode(dirty)) {\n            return window.toStaticHTML(dirty.outerHTML);\n          }\n        }\n\n        return dirty;\n      }\n      /* Assign config vars */\n\n\n      if (!SET_CONFIG) {\n        _parseConfig(cfg);\n      }\n      /* Clean up removed elements */\n\n\n      DOMPurify.removed = [];\n\n      if (IN_PLACE) {\n        /* No special handling necessary for in-place sanitization */\n      } else if (dirty instanceof Node) {\n        /* If dirty is a DOM element, append to an empty document to avoid\n           elements being stripped by the parser */\n        body = _initDocument('<!-->');\n        importedNode = body.ownerDocument.importNode(dirty, true);\n\n        if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {\n          /* Node is already a body, use as is */\n          body = importedNode;\n        } else if (importedNode.nodeName === 'HTML') {\n          body = importedNode;\n        } else {\n          // eslint-disable-next-line unicorn/prefer-node-append\n          body.appendChild(importedNode);\n        }\n      } else {\n        /* Exit directly if we have nothing to do */\n        if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && RETURN_TRUSTED_TYPE && dirty.indexOf('<') === -1) {\n          return trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n        }\n        /* Initialize the document to work on */\n\n\n        body = _initDocument(dirty);\n        /* Check we have a DOM node from the data */\n\n        if (!body) {\n          return RETURN_DOM ? null : emptyHTML;\n        }\n      }\n      /* Remove first element node (ours) if FORCE_BODY is set */\n\n\n      if (body && FORCE_BODY) {\n        _forceRemove(body.firstChild);\n      }\n      /* Get node iterator */\n\n\n      var nodeIterator = _createIterator(IN_PLACE ? dirty : body);\n      /* Now start iterating over the created document */\n\n\n      while (currentNode = nodeIterator.nextNode()) {\n        /* Fix IE's strange behavior with manipulated textNodes #89 */\n        if (currentNode.nodeType === 3 && currentNode === oldNode) {\n          continue;\n        }\n        /* Sanitize tags and elements */\n\n\n        if (_sanitizeElements(currentNode)) {\n          continue;\n        }\n        /* Shadow DOM detected, sanitize it */\n\n\n        if (currentNode.content instanceof DocumentFragment) {\n          _sanitizeShadowDOM(currentNode.content);\n        }\n        /* Check attributes, sanitize if necessary */\n\n\n        _sanitizeAttributes(currentNode);\n\n        oldNode = currentNode;\n      }\n\n      oldNode = null;\n      /* If we sanitized `dirty` in-place, return it. */\n\n      if (IN_PLACE) {\n        return dirty;\n      }\n      /* Return sanitized string or DOM */\n\n\n      if (RETURN_DOM) {\n        if (RETURN_DOM_FRAGMENT) {\n          returnNode = createDocumentFragment.call(body.ownerDocument);\n\n          while (body.firstChild) {\n            // eslint-disable-next-line unicorn/prefer-node-append\n            returnNode.appendChild(body.firstChild);\n          }\n        } else {\n          returnNode = body;\n        }\n\n        if (RETURN_DOM_IMPORT) {\n          /* AdoptNode() is not used because internal state is not reset\n                 (e.g. the past names map of a HTMLFormElement), this is safe\n                 in theory but we would rather not risk another attack vector.\n                 The state that is cloned by importNode() is explicitly defined\n                 by the specs. */\n          returnNode = importNode.call(originalDocument, returnNode, true);\n        }\n\n        return returnNode;\n      }\n\n      var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n      /* Sanitize final string template-safe */\n\n      if (SAFE_FOR_TEMPLATES) {\n        serializedHTML = serializedHTML.replace(MUSTACHE_EXPR$$1, ' ');\n        serializedHTML = serializedHTML.replace(ERB_EXPR$$1, ' ');\n      }\n\n      return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\n    };\n    /**\n     * Public method to set the configuration once\n     * setConfig\n     *\n     * @param {Object} cfg configuration object\n     */\n\n\n    DOMPurify.setConfig = function (cfg) {\n      _parseConfig(cfg);\n\n      SET_CONFIG = true;\n    };\n    /**\n     * Public method to remove the configuration\n     * clearConfig\n     *\n     */\n\n\n    DOMPurify.clearConfig = function () {\n      CONFIG = null;\n      SET_CONFIG = false;\n    };\n    /**\n     * Public method to check if an attribute value is valid.\n     * Uses last set config, if any. Otherwise, uses config defaults.\n     * isValidAttribute\n     *\n     * @param  {string} tag Tag name of containing element.\n     * @param  {string} attr Attribute name.\n     * @param  {string} value Attribute value.\n     * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\n     */\n\n\n    DOMPurify.isValidAttribute = function (tag, attr, value) {\n      /* Initialize shared config vars if necessary. */\n      if (!CONFIG) {\n        _parseConfig({});\n      }\n\n      var lcTag = tag.toLowerCase();\n      var lcName = attr.toLowerCase();\n      return _isValidAttribute(lcTag, lcName, value);\n    };\n    /**\n     * AddHook\n     * Public method to add DOMPurify hooks\n     *\n     * @param {String} entryPoint entry point for the hook to add\n     * @param {Function} hookFunction function to execute\n     */\n\n\n    DOMPurify.addHook = function (entryPoint, hookFunction) {\n      if (typeof hookFunction !== 'function') {\n        return;\n      }\n\n      hooks[entryPoint] = hooks[entryPoint] || [];\n      hooks[entryPoint].push(hookFunction);\n    };\n    /**\n     * RemoveHook\n     * Public method to remove a DOMPurify hook at a given entryPoint\n     * (pops it from the stack of hooks if more are present)\n     *\n     * @param {String} entryPoint entry point for the hook to remove\n     */\n\n\n    DOMPurify.removeHook = function (entryPoint) {\n      if (hooks[entryPoint]) {\n        hooks[entryPoint].pop();\n      }\n    };\n    /**\n     * RemoveHooks\n     * Public method to remove all DOMPurify hooks at a given entryPoint\n     *\n     * @param  {String} entryPoint entry point for the hooks to remove\n     */\n\n\n    DOMPurify.removeHooks = function (entryPoint) {\n      if (hooks[entryPoint]) {\n        hooks[entryPoint] = [];\n      }\n    };\n    /**\n     * RemoveAllHooks\n     * Public method to remove all DOMPurify hooks\n     *\n     */\n\n\n    DOMPurify.removeAllHooks = function () {\n      hooks = {};\n    };\n\n    return DOMPurify;\n  }\n\n  var purify = createDOMPurify();\n  return purify;\n});"],"sourceRoot":""}